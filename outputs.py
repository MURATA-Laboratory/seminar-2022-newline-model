import torch
import torchmetrics
from torch import tensor

outputs = [
    {
        "loss": tensor(1.7767),
        "batch_preds": [
            tensor(
                [
                    [0.5038],
                    [0.5085],
                    [0.4906],
                    [0.5330],
                    [0.5212],
                    [0.5103],
                    [0.5217],
                    [0.4782],
                    [0.5195],
                    [0.5079],
                    [0.5012],
                    [0.5067],
                    [0.5167],
                    [0.4997],
                    [0.5064],
                    [0.5184],
                ]
            ),
            tensor(
                [
                    [0.3623, 0.3093, 0.3284],
                    [0.3686, 0.3132, 0.3183],
                    [0.3665, 0.3274, 0.3060],
                    [0.3596, 0.3112, 0.3293],
                    [0.3724, 0.3068, 0.3208],
                    [0.3546, 0.3250, 0.3204],
                    [0.3858, 0.3029, 0.3114],
                    [0.3708, 0.3236, 0.3056],
                    [0.3523, 0.3172, 0.3305],
                    [0.3481, 0.3134, 0.3384],
                    [0.3662, 0.3130, 0.3208],
                    [0.3573, 0.3165, 0.3263],
                    [0.3516, 0.3196, 0.3288],
                    [0.3602, 0.3127, 0.3271],
                    [0.3927, 0.3107, 0.2967],
                    [0.3964, 0.3033, 0.3002],
                ]
            ),
        ],
        "batch_labels": tensor(
            [
                [1, 2],
                [1, 1],
                [0, 0],
                [0, 0],
                [0, 0],
                [1, 1],
                [0, 0],
                [0, 0],
                [0, 0],
                [1, 0],
                [1, 0],
                [0, 1],
                [1, 0],
                [0, 0],
                [0, 0],
                [1, 2],
            ]
        ),
    },
    {
        "loss": tensor(1.7870),
        "batch_preds": [
            tensor(
                [
                    [0.5077],
                    [0.5061],
                    [0.5241],
                    [0.5166],
                    [0.5009],
                    [0.5221],
                    [0.5043],
                    [0.5049],
                    [0.5249],
                    [0.5163],
                    [0.4993],
                    [0.5049],
                    [0.5098],
                    [0.5220],
                    [0.5169],
                    [0.5103],
                ]
            ),
            tensor(
                [
                    [0.3583, 0.3138, 0.3278],
                    [0.3729, 0.3155, 0.3116],
                    [0.3796, 0.3156, 0.3048],
                    [0.3666, 0.3200, 0.3134],
                    [0.3709, 0.3131, 0.3160],
                    [0.3603, 0.3142, 0.3254],
                    [0.3682, 0.3064, 0.3254],
                    [0.3776, 0.3156, 0.3068],
                    [0.3608, 0.3152, 0.3240],
                    [0.3621, 0.3273, 0.3106],
                    [0.3704, 0.3206, 0.3089],
                    [0.3633, 0.3207, 0.3160],
                    [0.3612, 0.3165, 0.3224],
                    [0.3485, 0.3119, 0.3396],
                    [0.3616, 0.3198, 0.3185],
                    [0.3883, 0.3079, 0.3038],
                ]
            ),
        ],
        "batch_labels": tensor(
            [
                [0, 1],
                [0, 0],
                [0, 0],
                [0, 0],
                [1, 0],
                [0, 0],
                [1, 2],
                [0, 0],
                [0, 0],
                [0, 0],
                [0, 0],
                [0, 0],
                [0, 0],
                [0, 0],
                [0, 0],
                [0, 0],
            ]
        ),
    },
]


comma_period_metrics = torchmetrics.MetricCollection(
    [
        torchmetrics.Accuracy(task="multiclass", num_classes=3),
        torchmetrics.Precision(task="multiclass", num_classes=3),
        torchmetrics.Recall(task="multiclass", num_classes=3),
        torchmetrics.F1Score(task="multiclass", num_classes=3),
        torchmetrics.MatthewsCorrCoef(task="multiclass", num_classes=3),
    ]
)

epoch_comma_period_preds = torch.cat([x["batch_preds"][1] for x in outputs])
epoch_comma_period_labels = torch.cat([x["batch_labels"][:, 1] for x in outputs])

print(comma_period_metrics(epoch_comma_period_preds, epoch_comma_period_labels))
